#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
lso13az09 - Documentazione fase 1 progetto SOS 2012/2013
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Author
Authors:
\end_layout

\begin_layout Author
Orgest Shehaj <shehaj@cs.unibo.it> 
\end_layout

\begin_layout Author
0000577768
\end_layout

\begin_layout Author
Fabian Priftaj <priftaj@cs.unibo.it> 
\end_layout

\begin_layout Author
090020667
\end_layout

\begin_layout Author
Eduart Uzeir <uzeir@cs.unibo.it> 
\end_layout

\begin_layout Author
0000355667
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset index_print
LatexCommand printindex
type "idx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Phase1
\end_layout

\begin_layout Standard
La prima fase del progetto SOS (Strange Operating System) consiste nella
 realizzazione del livello due del sistema operativo ideato da Dijkstra,
 nel modello a 7 livelli, nel livello due si gestiscono le code dei processi
 in esecuzione nel sistema operativo.
\end_layout

\begin_layout Standard
La prima fase si compone in due moduli, Process Control Block (PCB), ed
 Active Semaphore List (ASL)
\end_layout

\begin_layout Subsection
pcb.c
\end_layout

\begin_layout Standard
In questo modulo vengono gestite tre prati diverse del sistema operativo.
 Una parte relativa all'allocazione e alla deallocazione, una parte relativa
 alle code dei processi e una terza parte che gestisce gli alberi.
 
\end_layout

\begin_layout Standard
Ogni parte contiene delle funzioni che compiono delle semplici operazioni
 sulle liste.
\end_layout

\begin_layout Subsection
asl.c
\end_layout

\begin_layout Standard
Un semaforo è un tipo di dato astratto , gestito da un sistema operativo
 multitasking per sincronizzare l'accesso a risorse condivise tra task.
 
\end_layout

\begin_layout Section
Compilazione esecuzione di phase 1 
\end_layout

\begin_layout Standard
Per compilare i vari moduli ed il test si utilizza il comando make.
\end_layout

\begin_layout Standard
Esempio:
\end_layout

\begin_layout Standard
$ cd /SOS (enter) 
\end_layout

\begin_layout Standard
$ make (enter) 
\end_layout

\begin_layout Standard
Dopo aver inserito questi comandi il progetto verrà compilato e i file oggetto
 si creano automaticamente.
 
\end_layout

\begin_layout Standard
Dopo di chè si può procedere con il lancio del simulatore uMPS2, come segue...
\end_layout

\begin_layout Standard
$ umps2 (enter)
\end_layout

\begin_layout Standard
uMPS2 procederà con le sue fasi di inizializzazione chiedendo un file di
 configurazione che si crea automaticamente specificando la directory dove
 si vuole creare questo file e poi, usando la GUI del simulatore si esegue
 tutto.
 
\end_layout

\begin_layout Standard
Dopo premendo Alt+0 si aprira una finsetra del simulatore che elencerà il
 procedimento del test.
 In fine dopo che tutti i testo sono stati passati si puo chiudere il simulatore
 e si puo performare il comando per cancellare i file di compilazione.
 
\end_layout

\begin_layout Standard
$ make clean (enter) 
\end_layout

\begin_layout Standard
Questo comando cancellerà tutti i file oggetto e nelle directory rimarranò
 solo i file sorgenti.
\end_layout

\begin_layout Standard
La prima fase di questo progetto prevede la definizione di alcune strutture
 dati e metodi necessari per sviluppare la successiva fase di creazione
 delle principali componenti di un Sistema Operativo ad architettura a MicroKern
el.
 
\end_layout

\begin_layout Section
Gestione dei pcb e delle code
\end_layout

\begin_layout Subsection
Gestione dei pcb
\end_layout

\begin_layout Standard
I pcb sono gestiti usando i concetti di coda.
\end_layout

\begin_layout Standard
Tutti i pcb sono mantenuti in una struttura pcbFree_Table che fisicamente
 si presenta come un array, ma logicamente permette una gestione avanzata
 con code .
\end_layout

\begin_layout Standard
Le code sono popolate da strutture pcb_t, composte da 7 campi: che servono
 per la gestione dei processi.
\end_layout

\begin_layout Standard
void initPcbs(void): 
\end_layout

\begin_layout Standard
Inizializza la pcbFree in modo da contenere tutti gli elementi della pcbFree_tab
le.
 
\end_layout

\begin_layout Standard
void freePcb(pcb_t *p): 
\end_layout

\begin_layout Standard
Inserisce il PCB puntato da p nella lista dei PCB liberi 
\end_layout

\begin_layout Standard
pcb_t *allocPcb(void):
\end_layout

\begin_layout Standard
Restituisce NULL se la pcbFree e’ vuota.
 Altrimenti rimuove un elemento dalla pcbFree, inizializza tutti i campi
 (NULL/0) e restituisce l’elemento rimosso.
 
\end_layout

\begin_layout Standard
void insertProcQ( pcb_t **head, pcb_t* p):
\end_layout

\begin_layout Standard
inserisce l’elemento puntato da p nella coda dei processi puntata da head.
 L’inserimento deve avvenire tenendo conto della priorita’ di ciascun pcb
 
\end_layout

\begin_layout Standard
pcb_t* headProcQ(pcb_t* head): 
\end_layout

\begin_layout Standard
Restituisce l’elemento di testa della coda dei processi da head .
\end_layout

\begin_layout Standard
pcb_t* removeProcQ( pcb_t** head): 
\end_layout

\begin_layout Standard
rimuove il primo elemento dalla coda dei processi puntata da head.
 
\end_layout

\begin_layout Standard
pcb_t* outProcQ( pcb_t** head, pcb_t *p):
\end_layout

\begin_layout Standard
Rimuove il PCB puntato da p dalla coda dei processi puntata da head 
\end_layout

\begin_layout Standard
void forallProcQ(struct pcb_t *head, void fun(struct pcb_t *pcb, void *),
 void *arg): 
\end_layout

\begin_layout Standard
richiama la funzione fun per ogni elemento della lista puntata da head 
\end_layout

\begin_layout Standard
void insertChild(pcb_t *parent, pcb_t *p): 
\end_layout

\begin_layout Standard
Inserisce il PCB puntato da p come figlio del pcb puntato da parent.
 
\end_layout

\begin_layout Standard
pcb_t* removeChild(pcb_t *p): 
\end_layout

\begin_layout Standard
Rimuove il primo figlio del PCB puntato da p.
 Se p non ha figli, restituisce NULL.
 
\end_layout

\begin_layout Standard
pcb_t * outChild(pcb_t* p): 
\end_layout

\begin_layout Standard
Rimuove il PCB puntato da p dalla lista dei figli del padre.
 Se il PCB puntato da p non ha un padre, res*tuisce NULL.
 Altrimenti restituisce l’elemento rimosso (cioe’ p).
 A differenza della removeChild, p puo’ trovarsi in una posizione arbitraria
 .
\end_layout

\begin_layout Subsection
Gestione delle code
\end_layout

\begin_layout Standard
In SOS si gestisce l'accesso alle risorse da parte di più processi contemporanea
mente attraverso l'utilizzo dei semafori.
 I semafori sono realizzati attraverso una struttura dati che fa da descrittore
 (semd), la quale contiene i puntatori necessari a collegare il semaforo.
\end_layout

\begin_layout Standard
In particolare utilizziamo due code.
 Una coda e utilizzata per la gestione dei pcb occupati e una per i pcb
 liberi.
 
\end_layout

\begin_layout Standard
semd_t* getSemd(int *key): 
\end_layout

\begin_layout Standard
Cerca il semaforo con chiave key
\end_layout

\begin_layout Standard
void initASL():
\end_layout

\begin_layout Standard
Inizializza la lista dei semdFree in modo da contenere tutti gli elementi
 della semdTable.
 
\end_layout

\begin_layout Standard
int insertBlocked(int *key, pcb_t* p): 
\end_layout

\begin_layout Standard
Viene inserito il PCB puntato da p nella coda dei processi bloccati associata
 al SEMD con chiave key.
 Se il semaforo corrispondente non e’ presente nella ASL, alloca un nuovo
 SEMD dalla lista di quelli liberi (semdFree) e lo inserisce nella ASL,
 settando I campi in maniera opportuna.
 Se non e’ possibile allocare un nuovo SEMD perche’ la lista di quelli liberi
 e’ vuota, restituisce TRUE.
 In tutti gli altri casi, restituisce FALSE.
 
\end_layout

\begin_layout Standard
pcb_t* removeBlocked(int *key):
\end_layout

\begin_layout Standard
Ritorna il primo PCB dalla coda dei processi bloccanti (s_ProcQ) associata
 al SEMD della ASL con chiave key.
 
\end_layout

\begin_layout Standard
pcb_t* outBlocked(pcb_t *p): 
\end_layout

\begin_layout Standard
rimuove il pcb puntato da p dalla coda dei processi
\end_layout

\begin_layout Standard
pcb_t* headBlocked(int *key): 
\end_layout

\begin_layout Standard
restituisce il puntatore al pcb del primo processo bloccato sul semaforo,
 senza deaccordarlo.
 
\end_layout

\begin_layout Standard
void outChildBlocked(pcb_t *p):
\end_layout

\begin_layout Standard
Rimuove il PCB puntato da p dalla coda del semaforo su cui e’ bloccato ,
 termina anche tutti i processi discendenti
\end_layout

\begin_layout Standard
void forallBlocked(int *key, void fun(struct pcb_t *pcb, void *), void *arg):
 
\end_layout

\begin_layout Standard
richiama la funzione fun per ogni processo bloccato sul semaforo identificato
 da key.
 
\end_layout

\begin_layout Section
Correzioni 
\end_layout

\begin_layout Standard
Non sono state fatte correzioni ai files delle specifiche .
\end_layout

\begin_layout Section
Directory
\end_layout

\begin_layout Standard
I file e le direcotory sono organizzate nel modo seguente :
\end_layout

\begin_layout Standard
./Doc/ Contiene la documentazione, il file Authors, il Readme, la licenza.
\end_layout

\begin_layout Standard
./src/ Contiene a sua volta tre cartelle, include, modules e phase1
\end_layout

\begin_layout Standard
./src/include/ Contiene i file di header
\end_layout

\begin_layout Standard
./src/modules Contiene i file eiffel
\end_layout

\begin_layout Standard
./src/phase1 Contiene pcb.c, asl.c e p1test.c
\end_layout

\begin_layout Section
Source code
\end_layout

\end_body
\end_document
